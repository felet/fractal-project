#version 150

uniform vec3 lightSourcesDirPosArr[4];
uniform vec3 lightSourcesColorArr[4];
uniform float specularExponent[4];
uniform bool isDirectional[4];
uniform int cubeColorMode;

uniform vec3 camera_position;
uniform vec3 amplitude;

in vec3 frag_Position;
in vec3 frag_Normal;

out vec4 out_Color;

void main(void)
{
    if (cubeColorMode == 0)
    {
        vec3 light = vec3(-0.6, 0.6, 0.6);
        float shade = dot(frag_Normal, normalize(light));
        out_Color = vec4(vec3(shade), 1.0);
    }
    else if(cubeColorMode == 1)
        out_Color = vec4(vec3(frag_Position.y/10, 2.0-frag_Position.y/10, 0.0), 1.0);
    else if(cubeColorMode == 2)
        out_Color = vec4(vec3(amplitude), 1.0);
    else
    {
        vec3 nNormal = normalize(frag_Normal);
        vec3 eyePosition = vec3(0.0);//TODO remove
        vec3 eyeDirection = normalize(eyePosition-frag_Position);
        vec3 lightDirection[4], reflectedLightDirection[4];
        vec4 lightColor[4];
        float diffuseStrength[4], specularStrength[4];
        //for (int i=0;i<4;i++)
        int i=1;
        if (true)
        {
            if (isDirectional[i])
                lightDirection[i] = normalize(lightSourcesDirPosArr[i]);
            else
                lightDirection[i] = normalize(lightSourcesDirPosArr[i]-frag_Position);

            reflectedLightDirection[i] = normalize(-reflect(lightDirection[i],nNormal));
            lightColor[i] = vec4(lightSourcesColorArr[i],1.0);
            diffuseStrength[i] = max(dot(lightDirection[i],nNormal),0);
            if (diffuseStrength[i] > 0.0)
            {
                specularStrength[i] = pow(max(dot(reflectedLightDirection[i],eyeDirection),0.01),specularExponent[i]);
            }
        }
        vec4 sum=vec4(0.0);
        for(int i=0;i<4;i++)
            sum += (diffuseStrength[i]+specularStrength[i])*lightColor[i];
        out_Color = sum;
    }
}
