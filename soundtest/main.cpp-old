#include <time.h>


#include <iostream>
#include <fstream>
#include <math.h> // For sqrt()
#include <stdint.h> // For uint16_t and uint32_t

#include <AL/al.h>
#include <AL/alc.h>

#include <fftw3.h>



int main()
{
    #define HEADER_SIZE 44
    struct headerDataType
    {
        unsigned char riffHeader[4];
		uint32_t fileSize;
		unsigned char waveHeader[4];
		unsigned char formatHeader[4];
		uint32_t formatHeaderSize;
		uint16_t formatCode;
		uint16_t channelNumber;
		uint32_t sampleRate;
		uint32_t bytesPerSecond;
		uint16_t bytesPerSample;
		uint16_t bitsPerSample;
        uint32_t subChunkId;
        uint32_t dataBlockSize;
    } headerData;

    // Create a context
    ALCdevice *device = alcOpenDevice(NULL);
    ALCcontext *context = alcCreateContext(device, NULL);
    alcMakeContextCurrent(context);

    // Create a listener
    alListener3f(AL_POSITION, 0, 0, 0);
    alListener3f(AL_VELOCITY, 0, 0, 0);
    alListener3f(AL_ORIENTATION, 0, 0, -1);

    // Create a source
    ALuint source;
    alGenSources(1, &source);

    // Setup properties of source
    alSourcef(source, AL_PITCH, 1);
    alSourcef(source, AL_GAIN, 1);
    alSource3f(source, AL_POSITION, 0, 0, 0);
    alSource3f(source, AL_VELOCITY, 0, 0, 0);
    alSourcei(source, AL_LOOPING, AL_FALSE);

    // Create a buffer
    ALuint buffer;
    alGenBuffers(1, &buffer);

    std::ifstream::pos_type fileSize;
    std::ifstream file("sound.wav", std::ios::in|std::ios::binary|std::ios::ate);


    // Open sound file
    if (!file.is_open())
    {
        std::cout << "ERROR: Unable to open sound file!" << std::endl;
        return 1;
    }

    fileSize = file.tellg();

    // Set pointer to beginning
    file.seekg(0, std::ios::beg);

    // Read header data
    // - http://www.lightlink.com/tjweber/StripWav/Canon.html
    // - https://ccrma.stanford.edu/courses/422/projects/WaveFormat/
    if (fileSize < HEADER_SIZE)
    {
        std::cout << "ERROR: The sound file is too short!" << std::endl;
        return 1;
    }
    file.read((char *)&headerData, sizeof(headerDataType));

    // Print header data
    std::cout << "riffHeader:       "  << headerData.riffHeader[0]
            << headerData.riffHeader[1] << headerData.riffHeader[2]
            << headerData.riffHeader[3] << std::endl
        << "fileSize:         " << headerData.fileSize << std::endl
        << "waveHeader:       " << headerData.waveHeader[0]
            << headerData.waveHeader[1] << headerData.waveHeader[2]
            << headerData.waveHeader[3] << std::endl
        << "formatHeader:     " << headerData.formatHeader[0]
            << headerData.formatHeader[1] << headerData.formatHeader[2]
            << headerData.formatHeader[3]<< std::endl
        << "formatHeaderSize: " << headerData.formatHeaderSize << std::endl
        << "formatCode:       " << headerData.formatCode << std::endl
        << "channelNumber:    " << headerData.channelNumber << std::endl
        << "sampleRate:       " << headerData.sampleRate << std::endl
        << "bytesPerSecond:   " << headerData.bytesPerSecond << std::endl
        << "bytesPerSample:   " << headerData.bytesPerSample << std::endl
        << "bitsPerSample:    " << headerData.bitsPerSample << std::endl
        << "subChunkId:       " << headerData.subChunkId << std::endl
        << "dataBlockSize:    " << headerData.dataBlockSize << std::endl;

    if (headerData.bitsPerSample != 16)
    {
        std::cout << "ERROR: bitsPerSample must be 16!" << std::endl;
        return 1;
    }

    // Read all the sampled data from the file
    int16_t *samplings;
    // The index of the array is Divided by 2 since:
    // sizeof(char) == sizeof(int16_t) / 2
    samplings = new int16_t[ headerData.dataBlockSize/2 ];
    file.read ((char *)samplings, headerData.dataBlockSize);
    // Closing file stream
    file.close();
    std::cout << "Sound file is loaded in memory" << std::endl;

    // Load sampling data to buffer
    alBufferData(buffer, AL_FORMAT_STEREO16, (unsigned char *)samplings, headerData.dataBlockSize, headerData.sampleRate);

    // Assign buffers to source
    alSourcei(source, AL_BUFFER, buffer);

    float duration = float(headerData.dataBlockSize) / float(headerData.bytesPerSecond);
    std::cout << "Sound length: " << duration << std::endl;

    // Play source
    alSourcePlay(source);
    std::cout << "Playing..." << std::endl;

    // Setup FFTW
    #define N 20
    double fftIn[N+1];
    fftw_complex fftOut[N/2+1];
    fftw_plan fftPlan;
    fftPlan = fftw_plan_dft_r2c_1d(N, fftIn, fftOut, FFTW_ESTIMATE);

    int currentStatus;
    int iByte = 0;
    do
    {
        // Load position in buffer
        alGetSourcei(source, AL_BYTE_OFFSET, &iByte);

        // Print position in bytes
        //std::cout << samplings[i_byte/2] << std::endl;

        // Print position in seconds
        //std::cout << float(i_byte) / float(headerData.bytesPerSecond) << std::endl;

        for (int i = 0, iSample = iByte/2-N/2; i < N; i++, iSample++)
        {
            if (iSample > 0 || (unsigned int)iSample < headerData.dataBlockSize)
                fftIn[i] = (double)samplings[ iSample ];
            else
                fftIn[i] = 0.0;
        }

        fftw_execute(fftPlan);

        //TODO:  Print out FREQUENCIES
        for (int i = 0; i <= N; i++)
        {
            fftIn[i] = sqrt(fftOut[i][0]*fftOut[i][0] + fftOut[i][1]*fftOut[i][1]);
            std::cout << i << ": " << fftIn[i] << std::endl;
            //std::cout << i << ": " << fftOut[i][0] << "\t"<< fftOut[i][0] << std::endl;
        }
        std::cout << "#########################################"<< std::endl;

        // Sleep ca 1 frame
        usleep(20000);

        // Check if we are still playing sound
        alGetSourcei(source, AL_SOURCE_STATE, &currentStatus);

    } while (currentStatus == AL_PLAYING);
/*
    for(uint32_t i = 0; i < headerData.dataBlockSize/2; i++)
    {
       std::cout << samplings[i] << std::endl;
    }
*/

    // Cleanup OpenAL stuff and free memory
    fftw_destroy_plan(fftPlan);
    alDeleteSources(1, &source);
    alDeleteBuffers(1, &buffer);
    alcDestroyContext(context);
    alcCloseDevice(device);
    delete[] samplings;

    return 0;
}

