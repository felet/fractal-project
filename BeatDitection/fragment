#version 150

uniform vec3 lightSourcesDirPosArr[6];
uniform vec3 lightSourcesColorArr[6];
uniform float specularExponent[6];
uniform bool isDirectional[6];
uniform int modeCubeColor;
uniform int modeTransformation;
uniform int modeCubeDim;
uniform int modePhong;

uniform int cubeSide;
uniform vec3 camera_position;
uniform float amplitude;
uniform float lightBeat;

in vec3 frag_Position;
in vec3 frag_Normal;

out vec4 out_Color;

vec4 phong()
{
    if (modePhong == 0)
        return vec4(1.0);

    vec3 r, v, lightDirection, lightPos[6];
    float diffuseStrength, specularStrength, distance;
    vec3 sum = vec3(0.0f);

    for(int i=0;i < 6;i++)
    {
        lightPos[i] = lightSourcesDirPosArr[i]*float(5+modeCubeDim);
    }
    for(int i=0; i < 6; i++)
    {
        if(isDirectional[i])
        {
            distance = 1.0;
            lightDirection = normalize(lightPos[i]);
        }
        else
        {
            lightDirection = lightPos[i] - frag_Position;
            distance = length(lightDirection);
            lightDirection = normalize(lightDirection);
        }

        r = normalize(-reflect(lightDirection, frag_Normal));
        diffuseStrength = max(dot(lightDirection, frag_Normal), 0.0f);

        if (true || diffuseStrength > 0.0f)
        {
            v = normalize(camera_position - frag_Position);
            specularStrength = pow(max(dot(r, v), 0.1f), specularExponent[i]);
        }
        else
        {
            diffuseStrength = 0.0f;
            specularStrength = 0.0f;
        }
        sum = sum + (diffuseStrength + specularStrength) * lightSourcesColorArr[i] / (1.0 + distance/2);
    }

    return vec4(sum, 1.0f);
    //v = eye
    //r = reflected
}

void main(void)
{
    if(modeCubeColor == 0 || modeCubeColor == 1)
    {
        float tmp = 0.0;
        if (modeCubeColor == 0)
        {
            if (modeTransformation == 0)
            {   
                switch (cubeSide)
                {
                    case 0: tmp = frag_Position.y;
                            break;
                    case 1: tmp = frag_Position.x;
                            break;
                    case 2: tmp = abs(frag_Position.y);
                            break;
                    case 3: tmp = abs(frag_Position.x);
                            break;
                    case 4: tmp = frag_Position.z;
                            break;
                    case 5: tmp = abs(frag_Position.z);
                            break;
                }
            }
            else
                tmp = frag_Position.y;
            tmp = tmp - float(modeCubeDim/2);
        }
        else if (modeCubeColor == 1)
            tmp = amplitude;

        if (modeTransformation == 0)
        {
            out_Color = phong()*lightBeat*vec4(tmp/5.0, 2.0-tmp/5.0, 0.0, 1.0);
        }
        else
            out_Color = phong()*lightBeat*vec4(tmp/10.0, 2.0-tmp/10.0, 0.0, 1.0);
    }
    else
    {
        out_Color = phong()*lightBeat;
    }
}
